import{S as q,i as A,s as G,n as R,d as l,m as f,b as h,c as v,o as m,e as a,p as x,h as w,f as Q,j as n,k as C,l as $}from"../chunks/62BVG-0M.js";import"../chunks/IHki7fMi.js";import{w as B}from"../chunks/D3xHD3xP.js";function O(z){let s,T='<a href="/" class="svelte-xp12xz">← Back to Home</a>',g,r,E="🗂️ Drip Lists Module",b,D,S=`Drip Lists are collections of receivers (addresses, projects, or other drip lists) that 
	automatically split incoming funds according to specified weights. This module allows you 
	to create and update drip lists using either Viem or Ethers blockchain adapters.`,_,u,U="<h3>Drip List Operations:</h3> <ul><li><strong>Create:</strong> Deploy a new drip list with specified receivers and weights</li> <li><strong>Update:</strong> Modify existing drip list metadata and receiver configurations</li> <li><strong>Split Distribution:</strong> Automatically distribute incoming funds based on weights</li></ul>",I,i,p,k='<h3 class="svelte-xp12xz">Create Drip List (Viem) <span class="access-indicator write svelte-xp12xz">🔒 WRITE</span></h3> <p class="svelte-xp12xz">Create a new drip list using the Viem blockchain adapter. This operation will:</p> <ul><li>Set up a Viem wallet client</li> <li>Define split receivers with weights</li> <li>Create and deploy the drip list</li> <li>Upload metadata to IPFS</li> <li>Wait for indexing and verification</li></ul> <a href="/drip-lists/create-viem" class="svelte-xp12xz">Create with Viem →</a>',M,d,P='<h3 class="svelte-xp12xz">Create Drip List (Ethers) <span class="access-indicator write svelte-xp12xz">🔒 WRITE</span></h3> <p class="svelte-xp12xz">Create a new drip list using the Ethers blockchain adapter. This operation will:</p> <ul><li>Set up an Ethers wallet/signer</li> <li>Define split receivers with weights</li> <li>Create and deploy the drip list</li> <li>Upload metadata to IPFS</li> <li>Wait for indexing and verification</li></ul> <a href="/drip-lists/create-ethers" class="svelte-xp12xz">Create with Ethers →</a>',V,o,j='<h3 class="svelte-xp12xz">Update Drip List (Viem) <span class="access-indicator write svelte-xp12xz">🔒 WRITE</span></h3> <p class="svelte-xp12xz">Update an existing drip list using the Viem blockchain adapter. This operation will:</p> <ul><li>Create an initial drip list</li> <li>Modify metadata and receivers</li> <li>Update the drip list on-chain</li> <li>Upload new metadata to IPFS</li> <li>Verify the updates were applied</li></ul> <a href="/drip-lists/update-viem" class="svelte-xp12xz">Update with Viem →</a>',y,c,F='<h3 class="svelte-xp12xz">Update Drip List (Ethers) <span class="access-indicator write svelte-xp12xz">🔒 WRITE</span></h3> <p class="svelte-xp12xz">Update an existing drip list using the Ethers blockchain adapter. This operation will:</p> <ul><li>Create an initial drip list</li> <li>Modify metadata and receivers</li> <li>Update the drip list on-chain</li> <li>Upload new metadata to IPFS</li> <li>Verify the updates were applied</li></ul> <a href="/drip-lists/update-ethers" class="svelte-xp12xz">Update with Ethers →</a>',H,L,W='<h3 class="svelte-xp12xz">Get Drip List <span class="access-indicator read svelte-xp12xz">👁️ READ</span></h3> <p class="svelte-xp12xz">Query and retrieve drip list information from the network. This operation will:</p> <ul><li>Connect to the GraphQL API</li> <li>Query drip list by ID</li> <li>Fetch metadata from IPFS</li> <li>Display receivers and weights</li> <li>Show current balance and statistics</li></ul> <a href="/drip-lists/get" class="svelte-xp12xz">Get Drip List →</a>';return{c(){s=n("div"),s.innerHTML=T,g=C(),r=n("h1"),r.textContent=E,b=C(),D=n("p"),D.textContent=S,_=C(),u=n("div"),u.innerHTML=U,I=C(),i=n("div"),p=n("div"),p.innerHTML=k,M=C(),d=n("div"),d.innerHTML=P,V=C(),o=n("div"),o.innerHTML=j,y=C(),c=n("div"),c.innerHTML=F,H=C(),L=n("div"),L.innerHTML=W,this.h()},l(e){s=a(e,"DIV",{class:!0,"data-svelte-h":!0}),x(s)!=="svelte-15g6gdr"&&(s.innerHTML=T),g=w(e),r=a(e,"H1",{"data-svelte-h":!0}),x(r)!=="svelte-1qu2r2w"&&(r.textContent=E),b=w(e),D=a(e,"P",{"data-svelte-h":!0}),x(D)!=="svelte-byyjht"&&(D.textContent=S),_=w(e),u=a(e,"DIV",{class:!0,"data-svelte-h":!0}),x(u)!=="svelte-1id7x34"&&(u.innerHTML=U),I=w(e),i=a(e,"DIV",{class:!0});var t=Q(i);p=a(t,"DIV",{class:!0,"data-svelte-h":!0}),x(p)!=="svelte-1i8w55"&&(p.innerHTML=k),M=w(t),d=a(t,"DIV",{class:!0,"data-svelte-h":!0}),x(d)!=="svelte-15aljz3"&&(d.innerHTML=P),V=w(t),o=a(t,"DIV",{class:!0,"data-svelte-h":!0}),x(o)!=="svelte-1d78o2n"&&(o.innerHTML=j),y=w(t),c=a(t,"DIV",{class:!0,"data-svelte-h":!0}),x(c)!=="svelte-19aohj7"&&(c.innerHTML=F),H=w(t),L=a(t,"DIV",{class:!0,"data-svelte-h":!0}),x(L)!=="svelte-18hqjpp"&&(L.innerHTML=W),t.forEach(l),this.h()},h(){m(s,"class","back-link svelte-xp12xz"),m(u,"class","drip-lists-info svelte-xp12xz"),m(p,"class","operation svelte-xp12xz"),f(p,"disabled",!z[0].isConnected),m(d,"class","operation svelte-xp12xz"),f(d,"disabled",!z[0].isConnected),m(o,"class","operation svelte-xp12xz"),f(o,"disabled",!z[0].isConnected),m(c,"class","operation svelte-xp12xz"),f(c,"disabled",!z[0].isConnected),m(L,"class","operation svelte-xp12xz"),m(i,"class","operations svelte-xp12xz")},m(e,t){h(e,s,t),h(e,g,t),h(e,r,t),h(e,b,t),h(e,D,t),h(e,_,t),h(e,u,t),h(e,I,t),h(e,i,t),v(i,p),v(i,M),v(i,d),v(i,V),v(i,o),v(i,y),v(i,c),v(i,H),v(i,L)},p(e,[t]){t&1&&f(p,"disabled",!e[0].isConnected),t&1&&f(d,"disabled",!e[0].isConnected),t&1&&f(o,"disabled",!e[0].isConnected),t&1&&f(c,"disabled",!e[0].isConnected)},i:R,o:R,d(e){e&&(l(s),l(g),l(r),l(b),l(D),l(_),l(u),l(I),l(i))}}}function J(z,s,T){let g;return $(z,B,r=>T(0,g=r)),[g]}class Y extends q{constructor(s){super(),A(this,s,J,O,G,{})}}export{Y as component};
